<?php

declare(strict_types=1);

/**
 * 2Moons - Database Connection Helper
 * 
 * Modernized database connection helper with PDO, connection pooling,
 * and secure configuration management.
 *
 * @package 2Moons
 * @author Jan-Otto Kröpke <slaver7@gmail.com>
 * @author Modernized by AI Assistant
 * @copyright 2009 Lucky
 * @copyright 2016 Jan-Otto Kröpke <slaver7@gmail.com>
 * @copyright 2024 Modernized Version
 * @license MIT
 * @version 2.0.0
 * @link https://github.com/jkroepke/2Moons
 */

// Prevent direct access
if (!defined('ROOT_PATH')) {
    die('Direct access not allowed');
}

/**
 * Database connection configuration
 * This file is automatically generated by the installer
 */
$database = [
    'host' => '%s',
    'port' => '%s',
    'user' => '%s',
    'userpw' => '%s',
    'databasename' => '%s',
    'tableprefix' => '%s',
    'charset' => 'utf8mb4',
    'collation' => 'utf8mb4_unicode_ci',
    'timezone' => 'UTC',
    'ssl' => false,
    'ssl_ca' => null,
    'ssl_cert' => null,
    'ssl_key' => null,
    'ssl_cipher' => null,
    'ssl_verify' => false,
];

/**
 * Salt for password hashing
 * 22 characters from the alphabet "./0-9A-Za-z"
 */
$salt = '%s';

/**
 * Database connection options
 */
$databaseOptions = [
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES => false,
    PDO::ATTR_PERSISTENT => false,
    PDO::ATTR_TIMEOUT => 30,
    PDO::MYSQL_ATTR_INIT_COMMAND => sprintf(
        "SET NAMES %s COLLATE %s, sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO'",
        $database['charset'],
        $database['collation']
    ),
    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,
    PDO::MYSQL_ATTR_FOUND_ROWS => true,
];

/**
 * SSL configuration for secure connections
 */
if ($database['ssl']) {
    $sslOptions = [];
    
    if ($database['ssl_ca']) {
        $sslOptions[PDO::MYSQL_ATTR_SSL_CA] = $database['ssl_ca'];
    }
    
    if ($database['ssl_cert']) {
        $sslOptions[PDO::MYSQL_ATTR_SSL_CERT] = $database['ssl_cert'];
    }
    
    if ($database['ssl_key']) {
        $sslOptions[PDO::MYSQL_ATTR_SSL_KEY] = $database['ssl_key'];
    }
    
    if ($database['ssl_cipher']) {
        $sslOptions[PDO::MYSQL_ATTR_SSL_CIPHER] = $database['ssl_cipher'];
    }
    
    $sslOptions[PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT] = $database['ssl_verify'];
    
    $databaseOptions = array_merge($databaseOptions, $sslOptions);
}

/**
 * Create DSN for PDO connection
 */
$dsn = sprintf(
    'mysql:host=%s;port=%d;dbname=%s;charset=%s',
    $database['host'],
    (int) $database['port'],
    $database['databasename'],
    $database['charset']
);

/**
 * Global database instance
 * This will be initialized by the Database class
 */
$GLOBALS['database'] = $database;
$GLOBALS['databaseOptions'] = $databaseOptions;
$GLOBALS['databaseDsn'] = $dsn;
$GLOBALS['salt'] = $salt;

/**
 * Database connection helper functions
 */

/**
 * Get database configuration
 *
 * @return array Database configuration
 */
function getDatabaseConfig(): array
{
    global $database;
    return $database;
}

/**
 * Get database DSN
 *
 * @return string Database DSN
 */
function getDatabaseDsn(): string
{
    global $databaseDsn;
    return $databaseDsn;
}

/**
 * Get database options
 *
 * @return array Database options
 */
function getDatabaseOptions(): array
{
    global $databaseOptions;
    return $databaseOptions;
}

/**
 * Get password salt
 *
 * @return string Password salt
 */
function getPasswordSalt(): string
{
    global $salt;
    return $salt;
}

/**
 * Test database connection
 *
 * @return bool Connection status
 */
function testDatabaseConnection(): bool
{
    try {
        $dsn = getDatabaseDsn();
        $options = getDatabaseOptions();
        $config = getDatabaseConfig();
        
        $pdo = new PDO($dsn, $config['user'], $config['userpw'], $options);
        
        // Test query
        $stmt = $pdo->query('SELECT 1');
        $result = $stmt->fetch();
        
        return $result !== false;
        
    } catch (PDOException $e) {
        error_log('Database connection test failed: ' . $e->getMessage());
        return false;
    }
}

/**
 * Get database server info
 *
 * @return array Server information
 */
function getDatabaseServerInfo(): array
{
    try {
        $dsn = getDatabaseDsn();
        $options = getDatabaseOptions();
        $config = getDatabaseConfig();
        
        $pdo = new PDO($dsn, $config['user'], $config['userpw'], $options);
        
        return [
            'version' => $pdo->getAttribute(PDO::ATTR_SERVER_VERSION),
            'driver' => $pdo->getAttribute(PDO::ATTR_DRIVER_NAME),
            'connection_status' => $pdo->getAttribute(PDO::ATTR_CONNECTION_STATUS),
        ];
        
    } catch (PDOException $e) {
        return [
            'error' => $e->getMessage(),
            'version' => 'Unknown',
            'driver' => 'Unknown',
            'connection_status' => 'Failed',
        ];
    }
}

/**
 * Validate database configuration
 *
 * @return array Validation results
 */
function validateDatabaseConfig(): array
{
    $config = getDatabaseConfig();
    $errors = [];
    $warnings = [];
    
    // Required fields
    $required = ['host', 'port', 'user', 'userpw', 'databasename', 'tableprefix'];
    foreach ($required as $field) {
        if (empty($config[$field]) || $config[$field] === '%s') {
            $errors[] = "Missing required database configuration: {$field}";
        }
    }
    
    // Validate port
    if (isset($config['port']) && (!is_numeric($config['port']) || $config['port'] < 1 || $config['port'] > 65535)) {
        $errors[] = 'Invalid database port: ' . $config['port'];
    }
    
    // Validate charset
    if (isset($config['charset']) && !in_array($config['charset'], ['utf8', 'utf8mb4', 'latin1'])) {
        $warnings[] = 'Unusual database charset: ' . $config['charset'];
    }
    
    // Test connection if no errors
    if (empty($errors)) {
        if (!testDatabaseConnection()) {
            $errors[] = 'Database connection test failed';
        }
    }
    
    return [
        'valid' => empty($errors),
        'errors' => $errors,
        'warnings' => $warnings,
    ];
}

/**
 * Generate secure password salt
 *
 * @param int $length Salt length
 * @return string Generated salt
 */
function generatePasswordSalt(int $length = 22): string
{
    $chars = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    $salt = '';
    
    for ($i = 0; $i < $length; $i++) {
        $salt .= $chars[random_int(0, strlen($chars) - 1)];
    }
    
    return $salt;
}

/**
 * Hash password with salt
 *
 * @param string $password Plain text password
 * @param string|null $salt Password salt (optional)
 * @return string Hashed password
 */
function hashPassword(string $password, ?string $salt = null): string
{
    if ($salt === null) {
        $salt = getPasswordSalt();
    }
    
    return password_hash($password . $salt, PASSWORD_ARGON2ID, [
        'memory_cost' => 65536, // 64 MB
        'time_cost' => 4,       // 4 iterations
        'threads' => 3,         // 3 threads
    ]);
}

/**
 * Verify password against hash
 *
 * @param string $password Plain text password
 * @param string $hash Hashed password
 * @param string|null $salt Password salt (optional)
 * @return bool Verification result
 */
function verifyPassword(string $password, string $hash, ?string $salt = null): bool
{
    if ($salt === null) {
        $salt = getPasswordSalt();
    }
    
    return password_verify($password . $salt, $hash);
}

/**
 * Initialize database connection
 * This function is called by the Database class
 *
 * @return PDO PDO instance
 * @throws Exception If connection fails
 */
function initializeDatabaseConnection(): PDO
{
    $dsn = getDatabaseDsn();
    $options = getDatabaseOptions();
    $config = getDatabaseConfig();
    
    try {
        $pdo = new PDO($dsn, $config['user'], $config['userpw'], $options);
        
        // Set timezone if configured
        if (isset($config['timezone']) && $config['timezone'] !== 'UTC') {
            $pdo->exec("SET time_zone = '{$config['timezone']}'");
        }
        
        return $pdo;
        
    } catch (PDOException $e) {
        throw new Exception(
            'Database connection failed: ' . $e->getMessage(),
            $e->getCode(),
            $e
        );
    }
}

// Auto-initialize if not in CLI mode and Database class is available
if (PHP_SAPI !== 'cli' && class_exists('Database')) {
    try {
        Database::get();
    } catch (Exception $e) {
        error_log('Database initialization failed: ' . $e->getMessage());
    }
}